(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1602809018069;

	const files = [
		"/service-worker-index.html",
		"/data/unit1_1.json",
		"/data/unit1_2.json",
		"/data/unit1_3.json",
		"/favicon.png",
		"/global.css",
		"/images/unit1_1/animal_cell.gif",
		"/images/unit1_1/biotic_factors.jpg",
		"/images/unit1_1/capsid.png",
		"/images/unit1_1/eukaryote.gif",
		"/images/unit1_1/nucleus.png",
		"/images/unit1_1/organelles.jpg",
		"/images/unit1_1/plant_cell.jpg",
		"/images/unit1_1/prokaryote.png",
		"/images/unit1_1/virus.jpg",
		"/images/unit1_1/viruses_non-living.jpg",
		"/images/unit1_2/lipids.jpeg",
		"/images/unit1_3/ATP.png",
		"/images/unit1_3/cellular_respiration.png",
		"/images/unit1_3/photosynthesis.gif",
		"/images/unit1_3/products.png",
		"/images/unit1_3/reactants.png",
		"/logo-192.png",
		"/logo-512.png",
		"/manifest.json"
	];

	const shell = [
		"/client/client.9a894523.js",
		"/client/inject_styles.5607aec6.js",
		"/client/index.4562a3b1.js",
		"/client/content.696cba3a.js",
		"/client/[dnd_unit].7e07b99c.js",
		"/client/index.4f250af7.js",
		"/client/games.98d87f3b.js",
		"/client/[unit].c8f8d067.js",
		"/client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;
	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);
	self.addEventListener('install', (event) => {
	    event.waitUntil(caches
	        .open(ASSETS)
	        .then(cache => cache.addAll(to_cache))
	        .then(() => {
	        self.skipWaiting();
	    }));
	});
	self.addEventListener('activate', (event) => {
	    event.waitUntil(caches.keys().then(async (keys) => {
	        // delete old caches
	        for (const key of keys) {
	            if (key !== ASSETS)
	                await caches.delete(key);
	        }
	        self.clients.claim();
	    }));
	});
	self.addEventListener('fetch', (event) => {
	    if (event.request.method !== 'GET' || event.request.headers.has('range'))
	        return;
	    const url = new URL(event.request.url);
	    // don't try to handle e.g. data: URIs
	    if (!url.protocol.startsWith('http'))
	        return;
	    // ignore dev server requests
	    if (url.hostname === self.location.hostname && url.port !== self.location.port)
	        return;
	    // always serve static files and bundler-generated assets from cache
	    if (url.host === self.location.host && cached.has(url.pathname)) {
	        event.respondWith(caches.match(event.request));
	        return;
	    }
	    // for pages, you might want to serve a shell `service-worker-index.html` file,
	    // which Sapper has generated for you. It's not right for every
	    // app, but if it's right for yours then uncomment this section
	    /*
	    if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
	        event.respondWith(caches.match('/service-worker-index.html'));
	        return;
	    }
	    */
	    if (event.request.cache === 'only-if-cached')
	        return;
	    // for everything else, try the network first, falling back to
	    // cache if the user is offline. (If the pages never change, you
	    // might prefer a cache-first approach to a network-first one.)
	    event.respondWith(caches
	        .open(`offline${timestamp}`)
	        .then(async (cache) => {
	        try {
	            const response = await fetch(event.request);
	            cache.put(event.request, response.clone());
	            return response;
	        }
	        catch (err) {
	            const response = await cache.match(event.request);
	            if (response)
	                return response;
	            throw err;
	        }
	    }));
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9zZXJ2aWNlLXdvcmtlci5qcyIsIi4uLy4uL3NyYy9zZXJ2aWNlLXdvcmtlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IFNhcHBlciDigJQgZG8gbm90IGVkaXQgaXQhXG5leHBvcnQgY29uc3QgdGltZXN0YW1wID0gMTYwMjgwOTAxODA2OTtcblxuZXhwb3J0IGNvbnN0IGZpbGVzID0gW1xuXHRcIi9zZXJ2aWNlLXdvcmtlci1pbmRleC5odG1sXCIsXG5cdFwiL2RhdGEvdW5pdDFfMS5qc29uXCIsXG5cdFwiL2RhdGEvdW5pdDFfMi5qc29uXCIsXG5cdFwiL2RhdGEvdW5pdDFfMy5qc29uXCIsXG5cdFwiL2Zhdmljb24ucG5nXCIsXG5cdFwiL2dsb2JhbC5jc3NcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzEvYW5pbWFsX2NlbGwuZ2lmXCIsXG5cdFwiL2ltYWdlcy91bml0MV8xL2Jpb3RpY19mYWN0b3JzLmpwZ1wiLFxuXHRcIi9pbWFnZXMvdW5pdDFfMS9jYXBzaWQucG5nXCIsXG5cdFwiL2ltYWdlcy91bml0MV8xL2V1a2FyeW90ZS5naWZcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzEvbnVjbGV1cy5wbmdcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzEvb3JnYW5lbGxlcy5qcGdcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzEvcGxhbnRfY2VsbC5qcGdcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzEvcHJva2FyeW90ZS5wbmdcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzEvdmlydXMuanBnXCIsXG5cdFwiL2ltYWdlcy91bml0MV8xL3ZpcnVzZXNfbm9uLWxpdmluZy5qcGdcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzIvbGlwaWRzLmpwZWdcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzMvQVRQLnBuZ1wiLFxuXHRcIi9pbWFnZXMvdW5pdDFfMy9jZWxsdWxhcl9yZXNwaXJhdGlvbi5wbmdcIixcblx0XCIvaW1hZ2VzL3VuaXQxXzMvcGhvdG9zeW50aGVzaXMuZ2lmXCIsXG5cdFwiL2ltYWdlcy91bml0MV8zL3Byb2R1Y3RzLnBuZ1wiLFxuXHRcIi9pbWFnZXMvdW5pdDFfMy9yZWFjdGFudHMucG5nXCIsXG5cdFwiL2xvZ28tMTkyLnBuZ1wiLFxuXHRcIi9sb2dvLTUxMi5wbmdcIixcblx0XCIvbWFuaWZlc3QuanNvblwiXG5dO1xuZXhwb3J0IHsgZmlsZXMgYXMgYXNzZXRzIH07IC8vIGxlZ2FjeVxuXG5leHBvcnQgY29uc3Qgc2hlbGwgPSBbXG5cdFwiL2NsaWVudC9jbGllbnQuOWE4OTQ1MjMuanNcIixcblx0XCIvY2xpZW50L2luamVjdF9zdHlsZXMuNTYwN2FlYzYuanNcIixcblx0XCIvY2xpZW50L2luZGV4LjQ1NjJhM2IxLmpzXCIsXG5cdFwiL2NsaWVudC9jb250ZW50LjY5NmNiYTNhLmpzXCIsXG5cdFwiL2NsaWVudC9bZG5kX3VuaXRdLjdlMDdiOTljLmpzXCIsXG5cdFwiL2NsaWVudC9pbmRleC40ZjI1MGFmNy5qc1wiLFxuXHRcIi9jbGllbnQvZ2FtZXMuOThkODdmM2IuanNcIixcblx0XCIvY2xpZW50L1t1bml0XS5jOGY4ZDA2Ny5qc1wiLFxuXHRcIi9jbGllbnQvc2FwcGVyLWRldi1jbGllbnQuMWU3YTRhNWUuanNcIlxuXTtcblxuZXhwb3J0IGNvbnN0IHJvdXRlcyA9IFtcblx0eyBwYXR0ZXJuOiAvXlxcLyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9jb250ZW50XFwvPyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9kbmRnYW1lXFwvKFteL10rPylcXC8/JC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL2dhbWVzXFwvPyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC8oW14vXSs/KVxcLz8kLyB9XG5dOyIsbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztDQUFBO0NBQ08sTUFBTSxTQUFTLEdBQUcsYUFB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
